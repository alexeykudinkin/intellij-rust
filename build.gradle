buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.github.hurricup:gradle-grammar-kit-plugin:354bb8c477"
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.2.5'
    id 'org.jetbrains.kotlin.jvm' version '1.1.2'
    id "de.undercouch.download" version "3.2.0"
}

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

def isCi = System.env.CI != null

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            generatedSourceDirs += file('src/gen')
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version ideaVersion
        downloadSources !isCi
        updateSinceUntilBuild = false
        instrumentCode = false
//        alternativeIdePath = "debugger/lib/clion-$clionVersion"

        publishPlugin {
            username publishUsername
            password publishPassword
            channels publishChannel
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    compileKotlin {
        kotlinOptions {
            languageVersion = '1.1'
            // BACKCOMPAT: 2016.3
            apiVersion = '1.0'
        }
    }

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    sourceSets {
        main {
            java.srcDirs += 'src/gen'
        }
    }

    apply plugin: 'org.jetbrains.grammarkit'
    grammarKit {
        grammarKitRelease = '1.5.1'
        grammarKitTargetRoot = 'src/gen'
        purgeOldFiles = true
    }

    test {
        testLogging {
            events 'skipped', 'failed'
            exceptionFormat = 'full'
        }

        beforeSuite { suite ->
            if (suite.className != null) {
                println()
                println(suite.className)
            }
        }
        afterTest { desc, result ->
            def c = '.'
            if (result.resultType == TestResult.ResultType.FAILURE) {
                c = 'X'
            } else if (result.resultType == TestResult.ResultType.SKIPPED) {
                c = 'S'
            }
            print(c)
            System.out.flush()
        }
        afterSuite { println() }
    }

    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/jetbrains/markdown' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compileOnly('com.github.JetBrains:Grammar-Kit:34fd65b92af957c25d940b828d81ab3ba9b398b0') {
            exclude group: 'org.jetbrains.plugins'
            exclude module: 'idea'
        }

        testCompile 'junit:junit:4.+'
        testCompile 'org.assertj:assertj-core:3.2.0'

    }
}

project(':') {
    version = "0.1.0.$buildNumber" + (publishChannel?.trim() ? "-$publishChannel" : "")
    intellij { pluginName 'intellij-rust' }

    sourceSets {
        main {
            kotlin.srcDirs += 'debugger/src/main/kotlin'
            compileClasspath += files("debugger/lib/clion-$clionVersion/lib/clion.jar")
        }
    }
}

project(':toml') {
    version = "0.0.1.$buildNumber" + (publishChannel?.trim() ? "-$publishChannel" : "")
    intellij { pluginName 'intellij-toml' }
}

task downloadClion(type: de.undercouch.gradle.tasks.download.Download) {
    src "https://download.jetbrains.com/cpp/CLion-${clionVersion}.tar.gz"
    dest new File(project.projectDir, "debugger/lib/clion-${clionVersion}.tar.gz")
    overwrite false
}

task unpackClion(dependsOn: downloadClion, type: Copy) {
    from tarTree("debugger/lib/clion-${clionVersion}.tar.gz")
    into new File(project.projectDir, "debugger/lib")
}
compileKotlin.dependsOn unpackClion

dependencies {
    compile('org.jetbrains:markdown:0.1.12') {
        exclude module: 'kotlin-runtime'
        exclude module: 'kotlin-stdlib'
    }
}

task generateRustLexer(type: GenerateLexer) {
    source 'src/main/grammars/RustLexer.flex'
    targetDir 'src/gen/org/rust/lang/core/lexer'
    targetClass '_RustLexer'
}

task generateRustDocHighlightingLexer(type: GenerateLexer) {
    source 'src/main/grammars/RustDocHighlightingLexer.flex'
    targetDir 'src/gen/org/rust/lang/doc/lexer'
    targetClass '_RustDocHighlightingLexer'
}

task generateRustParser(type: GenerateParser) {
    source 'src/main/grammars/RustParser.bnf'
    pathToParser '/org/rust/lang/core/parser/RustParser.java'
    pathToPsiRoot '/org/rust/lang/core/psi'
}

compileKotlin.dependsOn generateRustLexer, generateRustDocHighlightingLexer, generateRustParser
compileTestKotlin.dependsOn generateRustLexer, generateRustDocHighlightingLexer, generateRustParser

project(':toml') {
    task generateTomlLexer(type: GenerateLexer) {
        source 'src/main/grammars/TomlLexer.flex'
        targetDir 'src/gen/org/toml/lang/core/lexer'
        targetClass '_TomlLexer'
    }

    task generateTomlParser(type: GenerateParser) {
        source 'src/main/grammars/TomlParser.bnf'
        pathToParser '/org/toml/lang/core/parser/TomlParser.java'
        pathToPsiRoot '/org/toml/lang/core/psi'
    }

    compileKotlin.dependsOn generateTomlLexer, generateTomlParser
    compileTestKotlin.dependsOn generateTomlLexer, generateTomlParser
}
