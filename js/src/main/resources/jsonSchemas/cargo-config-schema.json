// TODO: Review and add default values if they are useful
{
    "title": "JSON Schema for Cargo config files",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "type": "object",
    "properties": {
        "paths": {
            "type": "array",
            "title": "Dependencies overrides",
            "items": {
                "type": "string"
            }
        },
        "alias": {
            "type": "object",
            "title": "CLI command aliases",
            "description": "Environment: CARGO_ALIAS_<name>",
            "patternProperties": {
                "^.+$": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "build": {
            "type": "object",
            "title": "Build-time operations and compiler settings",
            "properties": {
                "jobs": {
                    "type": "integer",
                    "title": "Maximum number of parallel compiler processes",
                    "description": "Environment: CARGO_BUILD_JOBS"
                },
                "rustc": {
                    "type": "string",
                    "title": "Executable for `rustc`",
                    "description": "Environment: CARGO_BUILD_RUSTC or RUSTC",
                    "default": "rustc"
                },
                "rustc-wrapper": {
                    "type": "string",
                    "title": "Wrapper to execute instead of `rustc`",
                    "description": "Environment: CARGO_BUILD_RUSTC_WRAPPER or RUSTC_WRAPPER"
                },
                "rustc-workspace-wrapper": {
                    "type": "string",
                    "title": "Wrapper to execute instead of `rustc` (workspace-only)",
                    "description": "Environment: CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER or RUSTC_WORKSPACE_WRAPPER"
                },
                "rustdoc": {
                    "type": "string",
                    "title": "Executable for `rustdoc`",
                    "description": "Environment: CARGO_BUILD_RUSTDOC or RUSTDOC",
                    "default": "rustdoc"
                },
                "target": {
                    "type": "string",
                    "title": "Default target platform triple",
                    "description": "Environment: CARGO_BUILD_TARGET"
                },
                "target-dir": {
                    "type": "string",
                    "title": "Compiler output location",
                    "description": "Environment: CARGO_BUILD_TARGET_DIR or CARGO_TARGET_DIR",
                    "default": "target"
                },
                "rustflags": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "title": "Extra flags for `rustc`",
                    "description": "Environment: CARGO_BUILD_RUSTFLAGS or CARGO_ENCODED_RUSTFLAGS or RUSTFLAGS.\nIgnored if there is any other source of Rust flags present.",
                    "items": {
                        "type": "string"
                    }
                },
                "rustdocflags": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "title": "Extra flags for `rustdoc`",
                    "description": "Environment: CARGO_BUILD_RUSTDOCFLAGS or CARGO_ENCODED_RUSTDOCFLAGS or RUSTDOCFLAGS\nIgnored if there is any other source of Rustdoc flags present.",
                    "items": {
                        "type": "string"
                    }
                },
                "incremental": {
                    "type": "boolean",
                    "title": "Perform incremental compilation",
                    "description": "Environment: CARGO_BUILD_INCREMENTAL or CARGO_INCREMENTAL"
                },
                "dep-into-basedir": {
                    "type": "string",
                    "title": "Strips the given path prefix from dep info file paths",
                    "description": "Environment: CARGO_BUILD_DEP_INFO_BASEDIR"
                },
                "pipelining": {
                    "type": "boolean",
                    "title": "(Deprecated) Use build pipelining",
                    "description": "This option is deprecated and unused. Cargo always has pipelining enabled.",
                    "deprecated": true
                }
            }
        },
        "doc": {
            "type": "object",
            "title": "Options for `cargo doc`",
            "properties": {
                "browser": {
                    "type": "string",
                    "title": "Browser to be used",
                    "description": "Default: BROWSER environment variable, or, if that is missing, opening the link in a system specific way"
                }
            }
        },
        "cargo-new": {
            "type": "object",
            "title": "Defaults for `cargo new`",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "(Deprecated)",
                    "deprecated": true
                },
                "email": {
                    "type": "string",
                    "title": "(Deprecated)",
                    "deprecated": true
                },
                "vcs": {
                    "type": "string",
                    "title": "Source control system to use",
                    "default": "git",
                    "enum": [
                        "git",
                        "hg",
                        "pijul",
                        "fossil",
                        "none"
                    ]
                }
            }
        },
        "env": {
            "type": "object",
            "title": "Additional environment variables",
            "description": "Sets environment variables for build scripts, rustc, cargo run and cargo build. By default will not override values in environment, to do this, use --force.",
            "patternProperties": {
                "^.+$": {
                    "type": ["string", "object"],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string",
                                    "title": "Value"
                                },
                                "force": {
                                    "type": "boolean",
                                    "title": "Override if present in environment"
                                },
                                "relative": {
                                    "type": "boolean",
                                    "title": "Evaluate path in value as parent-dir-relative to config"
                                }
                            }
                        }
                    ]
                }
            }
        },
        "future-incompat-report": {
            "title": "Future icompat reporting settings",
            "description": "Cargo checks for future-incompatible warnings in all dependencies. These are warnings for changes that may become hard errors in the future, causing the dependency to stop building in a future version of rustc. If any warnings are found, a small notice is displayed indicating that the warnings were found, and provides instructions on how to display a full report.",
            "items": {
                "frequency": {
                    "type": "string",
                    "title": "Display notification in terminal",
                    "description": "Environment: CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY",
                    "default": "always",
                    "enum": [
                        "always",
                        "never"
                    ]
                }
            }
        },
        "http": {
            "type": "object",
            "title": "HTTP behaviour settings",
            "description": "Defines settings for HTTP behavior. This includes fetching crate dependencies and accessing remote git repositories.",
            "properties": {
                "debug": {
                    "type": "boolean",
                    "title": "Enable debug for HTTP requests",
                    "description": "Environment: CARGO_HTTP_DEBUG"
                },
                "proxy": {
                    "type": "string",
                    "title": "HTTP(S) proxy to use",
                    "description": "Environment: CARGO_HTTP_PROXY or HTTPS_PROXY or https_proxy or http_proxy"
                },
                "timeout": {
                    "type": "integer",
                    "title": "Timeout for each request (seconds)",
                    "description": "Environment: CARGO_HTTP_TIMEOUT or HTTP_TIMEOUT"
                },
                "cainfo": {
                    "type": "string",
                    "title": "Path to a Certificate Authority (CA) bundle file",
                    "description": "Environment: CARGO_HTTP_CAINFO\nUsed to verify TLS certificates. If not specified, Cargo attempts to use the system certificates."
                },
                "check-revoke": {
                    "type": "boolean",
                    "title": "Perform TLS certificate revocation (windows-only)",
                    "description": "Environment: CARGO_HTTP_CHECK_REVOKE"
                },
                "ssl-version": {
                    "type": [
                        "string",
                        "object"
                    ],
                    "title": "Minimum TLS version to use",
                    "oneOf": [
                        {
                            "type": "string",
                            "const": "default"
                        },
                        {
                            "type": "string",
                            "$ref": "#/$defs/tls-versions"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "min": {
                                    "$ref": "#/$defs/tls-versions"
                                },
                                "max": {
                                    "$ref": "#/$defs/tls-versions"
                                }
                            }
                        }
                    ]
                },
                "low-speed-limit": {
                    "type": "integer",
                    "title": "Retry when speed is lower for `http.timeout` seconds",
                    "description": "Environment: CARGO_HTTP_LOW_SPEED_LIMIT",
                    "default": 10
                },
                "multiplexing": {
                    "type": "boolean",
                    "title": "Use HTTP2 protocol with multiplexing",
                    "description": "Environment: CARGO_HTTP_MULTIPLEXING",
                    "default": true
                },
                "user-agent": {
                    "type": "string",
                    "title": "Custom user-agent header",
                    "description": "Environment: CARGO_HTTP_USER_AGENT"
                }
            }
        },
        "install": {
            "type": "object",
            "title": "Defaults for `cargo install`",
            "properties": {
                "root": {
                    "type": "string",
                    "title": "Root path for installing executables",
                    "description": "Environment: CARGO_INSTALL_ROOT"
                }
            }
        },
        "net": {
            "type": "object",
            "title": "Networking configuration",
            "properties": {
                "retry": {
                    "type": "integer",
                    "title": "Times to retry possibly spurious network errors",
                    "description": "Environment: CARGO_NET_RETRY",
                    "default": 2
                },
                "git-fetch-with-cli": {
                    "type": "boolean",
                    "title": "Use `git` executable to fetch registry indexes and git dependencies",
                    "description": "Environment: CARGO_NET_GIT_FETCH_WITH_CLI",
                    "default": false
                },
                "offline": {
                    "type": "boolean",
                    "title": "Avoid network, try cached data",
                    "description": "Environment: CARGO_NET_OFFLINE",
                    "default": false
                }
            }
        },
        // Same as in `cargo-manifest-schema.json`
        "patch": {
            "type": "object",
            "title": "Override dependencies",
            "properties": {
                "crates-io": {
                    "title": "Default crates.io registry",
                    "$ref": "#/$defs/dependencies"
                }
            },
            "patternProperties": {
                "^.+$": {
                    "$ref": "#/$defs/dependencies"
                }
            }
        },
        "profile": {
            "type": "object",
            "title": "Change profile settings, override settings Cargo.toml",
            "description": "",
            "properties": {
            },
            "patternProperties": {
                "^.+$": {
                    "type": "object",
                    "properties": {
                        "package": {
                            "type": "object",
                            "title": "Override profile settings for packages",
                            "patternProperties": {
                                "^.+$": {
                                    "type": "object",
                                    // Should be normal profile but without panic, lto, rpath.
                                    // For now it is just normal profile
                                    "$ref": "#/$defs/profile-settings"
                                }
                            }
                        },
                        "build-override": {
                            "type": "object",
                            "title": "Override settings for build scripts, proc macros, deps",
                            "description": "CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>",
                            "$ref": "#/$defs/profile-settings"
                        },
                        "opt-level": {
                            "type": ["integer", "string"],
                            "title": "Optimization level",
                            "description": "Environment: CARGO_PROFILE_<name>_OPT_LEVEL",
                            "oneOf": [
                                {
                                    "const": 0,
                                    "title": "No optimizations"
                                },
                                {
                                    "const": 1,
                                    "title": "Basic optimizations"
                                },
                                {
                                    "const": 2,
                                    "title": "Some optimizations"
                                },
                                {
                                    "const": 3,
                                    "title": "All optimizations"
                                },
                                {
                                    "const": "s",
                                    "title": "Optimize for binary size"
                                },
                                {
                                    "const": "z",
                                    "title": "Optimize for binary size, no loop vectorization"
                                }
                            ]
                        },
                        "debug": {
                            "type": ["integer", "boolean"],
                            "title": "Debug information",
                            "description": "Environment: CARGO_PROFILE_<name>_DEBUG",
                            "oneOf": [
                                {
                                    "enum": [0, false],
                                    "title": "No debug info at all"
                                },
                                {
                                    "const": 1,
                                    "title": "Line tables only"
                                },
                                {
                                    "enum": [2, true],
                                    "title": "Full debug info"
                                }
                            ]
                        },
                        "split-debuginfo": {
                            "type": "string",
                            "title": "Debug information generation",
                            "description": "Environment: CARGO_PROFILE_<name>_SPLIT_DEBUGINFO",
                            "enum": ["off", "packed", "unpacked"]
                        },
                        "debug-assertions": {
                            "type": "boolean",
                            "title": "Turn `cfg(debug_assertions)` on",
                            "description": "Environment: CARGO_PROFILE_<name>_DEBUG_ASSERTIONS\nThe debug-assertions setting controls the `-C debug-assertions` flag which turns `cfg(debug_assertions)` conditional compilation on or off. Debug assertions are intended to include runtime validation which is only available in debug/development builds. These may be things that are too expensive or otherwise undesirable in a release build. Debug assertions enables the `debug_assert!` macro in the standard library."
                        },
                        "overflow-checks": {
                            "type": "boolean",
                            "title": "Enable runtime integer overflow",
                            "description": "Environment: CARGO_PROFILE_<name>_OVERFLOW_CHECKS"
                        },
                        "lto": {
                            "type": ["boolean", "string"],
                            "title": "Link time optimizations",
                            "description": "Environment: CARGO_PROFILE_<name>_LTO",
                            "oneOf": [
                                {
                                    "const": false,
                                    "title": "Thin local LTO"
                                },
                                {
                                    "enum": [true, "fat"],
                                    "title": "Fat LTO"
                                },
                                {
                                    "const": "thin",
                                    "title": "Thin LTO"
                                },
                                {
                                    "const": "off",
                                    "title": "Disable LTO"
                                }
                            ]
                        },
                        "panic": {
                            "type": "string",
                            "title": "Panic strategy",
                            "description": "Environment: CARGO_PROFILE_<name>_CODEGEN_UNITS",
                            "oneOf": [
                                {
                                    "const": "unwind",
                                    "title": "Unwind the stack upon panic"
                                },
                                {
                                    "const": "abort",
                                    "title": "Terminate the process upon panic"
                                }
                            ]
                        },
                        "incremental": {
                            "type": "boolean",
                            "title": "Enable incremental compilation",
                            "description": "Environment: CARGO_PROFILE_<name>_INCREMENTAL"
                        },
                        "codegen-units": {
                            "type": "integer",
                            "title": "Codegen units for crate to split in",
                            "description": "Environment: CARGO_PROFILE_<name>_CODEGEN_UNITS\nThe default is 256 for incremental builds, and 16 for non-incremental builds.",
                            "minimum": 0
                        },
                        "rpath": {
                            "type": "boolean",
                            "title": "Enable rpath",
                            "description": "Environment: CARGO_PROFILE_<name>_RPATH"
                        }
                    }
                }
            }
        },
        "registries": {
            "type": "object",
            "title": "Additional registries",
            "patternProperties": {
                "^.+$": {
                    "type": "object",
                    "properties": {
                        "index": {
                            "type": "string",
                            "title": "Git index URL",
                            "description": "Environment: CARGO_REGISTRIES_<name>_INDEX"
                        },
                        "token": {
                            "type": "string",
                            "title": "Authentication token",
                            "description": "Environment: CARGO_REGISTRIES_<name>_TOKEN\nThis value should appear only in $CARGO_HOME/credentials.toml file!"
                        }
                    }
                }
            }
        },
        "registry": {
            "type": "object",
            "properties": {
                "index": {
                    "title": "(Deprecated)",
                    "deprecated": true
                },
                "default": {
                    "type": "string",
                    "title": "Default registry for cargo commands",
                    "description": "Environment: CARGO_REGISTRY_DEFAULT\nName from [registeries] table",
                    "default": "crates-io"
                },
                "token": {
                    "type": "string",
                    "title": "Authentication token for crates.io",
                    "description": "Environment: CARGO_REGISTRY_TOKEN\nThis value should appear only in $CARGO_HOME/credentials.toml file!"
                }
            }
        },
        "source": {
            "type": "object",
            "title": "Registry sources",
            "patternProperties": {
                "^.+$": {
                    "properties": {
                        "replace-with": {
                            "type": "string",
                            "title": "Replace registry source with given one"
                        },
                        "directory": {
                            "type": "string",
                            "title": "Path to directory to use as source"
                        },
                        "registry": {
                            "type": "string",
                            "title": "URL to use for registry source"
                        },
                        "local-registry": {
                            "type": "string",
                            "title": "Path to directory to use as local registry source"
                        },
                        "git": {
                            "type": "string",
                            "title": "URL to use for git repository source"
                        },
                        "branch": {
                            "type": "string",
                            "title": "Branch name to use with git repository source",
                            "description": "If none of branch, tag, or rev is set, defaults to the master branch."
                        },
                        "tag": {
                            "type": "string",
                            "title": "Tag to use with git repository source",
                            "description": "If none of branch, tag, or rev is set, defaults to the master branch."
                        },
                        "rev": {
                            "type": "string",
                            "title": "Revision to use with git repository source",
                            "description": "If none of branch, tag, or rev is set, defaults to the master branch."
                        }
                    }
                }
            }
        },
        "target": {
            "type": "object",
            "description": "Settings for specific platform targets",
            "patternProperties": {
                "^.+$": {
                    "properties": {
                        "ar": {
                            "title": "(Deprecated)",
                            "deprecated": true
                        },
                        "linker": {
                            "type": "string",
                            "title": "Linker for rustc",
                            "description": "Environment: CARGO_TARGET_<triple>_LINKER\nLinker to use with rustc (-C linker)"
                        },
                        "runner": {
                            "type": ["string", "array"],
                            "title": "Runner for executables",
                            "description": "Environment: CARGO_TARGET_<triple>_RUNNER\nThis applies to cargo run, cargo test and cargo bench commands.",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ]
                        },
                        "rustflags": {
                            "type": ["string", "array"],
                            "title": "Custom flags for compiler",
                            "description": "Environment: CARGO_TARGET_<triple>_RUSTFLAGS\nHas higher priority than build.rustflags, but lower than envars. Joins flags together between target.<cfg> and target.<triple> if both are applicable",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "term": {
            "type": "object",
            "title": "Terminal output and interaction",
            "properties": {
                "quiet": {
                    "title": "Display cargo log messages",
                    "description": "Environment: CARGO_TERM_QUIET",
                    "default": false
                },
                "verbose": {
                    "type": "boolean",
                    "title": "Display extra detailed messages",
                    "description": "Environment: CARGO_TERM_VERBOSE"
                },
                "color": {
                    "type": "string",
                    "title": "Use colored output",
                    "description": "Environment: CARGO_TERM_COLOR",
                    "enum": ["auto", "always", "never"],
                    "default": "auto"
                },
                "progress": {
                    "type": "object",
                    "properties": {
                        "when": {
                            "type": "string",
                            "title": "Display progress bar",
                            "description": "Environment: CARGO_TERM_PROGRESS_WHEN",
                            "enum": ["auto", "always", "never"],
                            "default": "auto"
                        },
                        "width": {
                            "type": "integer",
                            "title": "Progress bar width",
                            "description": "Environment: CARGO_TERM_PROGRESS_WIDTH"
                        }
                    }
                }
            }
        }
    },
    "$defs": {
        "tls-versions": {
            "enum": ["tlsv1", "tlsv1.0", "tlsv1.1", "tlsv1.2", "tlsv1.3"]
        },
        // same as in manifest
        "dependencies": {
            "patternProperties": {
                "^.+$": {
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string",
                            "title": "Version requirement"
                        },
                        "registry": {
                            "type": "string",
                            "title": "Custom registry"
                        },
                        "features": {
                            "type": "array",
                            "title": "Enabled features",
                            "items": {
                                "type": "string"
                            }
                        },
                        "git": {
                            "type": "string",
                            "title": "Link to git repository"
                        },
                        "branch": {
                            "type": "string",
                            "title": "Branch of git repository"
                        },
                        "path": {
                            "type": "string",
                            "title": "Local path to package"
                        },
                        "package": {
                            "type": "string",
                            "title": "Package name in registry (overriding key)"
                        },
                        "default-features": {
                            "type": "boolean",
                            "title": "Do not include default features"
                        },
                        "optional": {
                            "type": "boolean",
                            "title": "Optionally include using features"
                        }
                    }
                }
            }
        },
        "profile-settings": {
            "properties": {
                "opt-level": {
                    "type": ["integer", "string"],
                    "title": "Optimization level",
                    "oneOf": [
                        {
                            "const": 0,
                            "title": "No optimizations"
                        },
                        {
                            "const": 1,
                            "title": "Basic optimizations"
                        },
                        {
                            "const": 2,
                            "title": "Some optimizations"
                        },
                        {
                            "const": 3,
                            "title": "All optimizations"
                        },
                        {
                            "const": "s",
                            "title": "Optimize for binary size"
                        },
                        {
                            "const": "z",
                            "title": "Optimize for binary size, no loop vectorization"
                        }
                    ]
                },
                "debug": {
                    "type": ["integer", "boolean"],
                    "title": "Debug information",
                    "oneOf": [
                        {
                            "enum": [0, false],
                            "title": "No debug info at all"
                        },
                        {
                            "const": 1,
                            "title": "Line tables only"
                        },
                        {
                            "enum": [2, true],
                            "title": "Full debug info"
                        }
                    ]
                },
                "split-debuginfo": {
                    "type": "string",
                    "title": "Debug information generation",
                    "enum": ["off", "packed", "unpacked"]
                },
                "strip": {
                    "type": ["boolean", "string"],
                    "title": "Strip symbols/debuginfo from binary",
                    "oneOf": [
                        {
                            "enum": [true, "symbols"],
                            "title": "Strip symbols"
                        },
                        {
                            "const": "debuginfo",
                            "title": "Strip debuginfo"
                        },
                        {
                            "enum": [false, "none"],
                            "title": "Disable strip"
                        }
                    ]
                },
                "debug-assertions": {
                    "type": "boolean",
                    "title": "Turn `cfg(debug_assertions)` on",
                    "description": "The debug-assertions setting controls the `-C debug-assertions` flag which turns `cfg(debug_assertions)` conditional compilation on or off. Debug assertions are intended to include runtime validation which is only available in debug/development builds. These may be things that are too expensive or otherwise undesirable in a release build. Debug assertions enables the `debug_assert!` macro in the standard library."
                },
                "overflow-checks": {
                    "type": "boolean",
                    "title": "Enable runtime integer overflow"
                },
                "lto": {
                    "type": ["boolean", "string"],
                    "title": "Link time optimizations",
                    "oneOf": [
                        {
                            "const": false,
                            "title": "Thin local LTO"
                        },
                        {
                            "enum": [true, "fat"],
                            "title": "Fat LTO"
                        },
                        {
                            "const": "thin",
                            "title": "Thin LTO"
                        },
                        {
                            "const": "off",
                            "title": "Disable LTO"
                        }
                    ]
                },
                "panic": {
                    "type": "string",
                    "title": "Panic strategy",
                    "oneOf": [
                        {
                            "const": "unwind",
                            "title": "Unwind the stack upon panic"
                        },
                        {
                            "const": "abort",
                            "title": "Terminate the process upon panic"
                        }
                    ]
                },
                "incremental": {
                    "type": "boolean",
                    "title": "Enable incremental compilation"
                },
                "codegen-units": {
                    "type": "integer",
                    "title": "Codegen units for crate to split in",
                    "description": "The default is 256 for incremental builds, and 16 for non-incremental builds.",
                    "minimum": 0
                },
                "rpath": {
                    "type": "boolean",
                    "title": "Enable rpath"
                }
            }
        }
    }
}
