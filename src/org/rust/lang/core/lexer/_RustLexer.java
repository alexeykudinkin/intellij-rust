/* The following code was generated by JFlex 1.4.3 on 9/27/15 2:29 AM */

package org.rust.lang.core.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/27/15 2:29 AM from the specification file
 * <tt>/home/matklad/projects/intellij-rust/src/org/rust/lang/core/lexer/RustLexer.flex</tt>
 */
public class _RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int LIFETIME_OR_CHAR = 6;
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int SUFFIX = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\43\1\34\1\42"+
    "\1\0\1\64\1\57\1\45\1\47\1\50\1\62\1\55\1\53\1\7"+
    "\1\5\1\63\1\16\1\24\1\12\1\11\1\14\1\32\1\13\1\32"+
    "\1\23\1\4\1\51\1\52\1\60\1\54\1\65\1\66\1\67\4\31"+
    "\1\6\1\31\14\105\1\102\7\105\1\44\1\35\1\46\1\61\1\15"+
    "\1\0\1\70\1\21\1\71\1\76\1\30\1\10\1\73\1\100\1\26"+
    "\1\105\1\75\1\72\1\74\1\36\1\20\1\77\1\105\1\33\1\25"+
    "\1\37\1\22\1\101\1\104\1\17\1\103\1\27\1\40\1\56\1\41"+
    "\2\0\200\3\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\6\7\5\1\12\1\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\12\5\1\0\2\43\1\44\1\45\4\0\1\46\1\47"+
    "\1\50\1\51\2\5\1\52\1\5\3\6\13\5\1\53"+
    "\1\54\5\5\2\12\2\5\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\5"+
    "\1\100\10\5\1\101\6\5\1\1\1\0\3\102\1\0"+
    "\1\103\2\104\5\0\1\6\2\0\1\105\1\106\4\5"+
    "\1\107\2\5\1\110\12\5\1\111\4\5\1\112\1\113"+
    "\5\5\1\114\1\115\1\5\1\116\2\5\1\117\10\5"+
    "\1\120\3\102\2\0\1\120\1\104\1\0\12\5\1\121"+
    "\2\5\1\122\1\5\1\123\1\124\1\5\1\125\1\5"+
    "\1\126\5\5\1\127\1\130\2\5\1\131\1\132\1\133"+
    "\1\5\1\134\3\5\2\102\3\0\1\135\1\136\3\5"+
    "\1\137\2\5\1\140\5\5\1\141\3\5\1\142\1\5"+
    "\1\143\1\144\1\145\1\5\1\146\1\147\1\150\1\102"+
    "\1\0\2\5\1\151\1\5\1\152\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\4\5\1\102\1\0\2\5\1\161"+
    "\1\5\1\162\1\5\1\163\1\164\1\0\1\165\1\166"+
    "\1\167\1\170\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u01ea\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u015e"+
    "\0\u015e\0\u0604\0\u064a\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u0690\0\u015e\0\u015e\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u015e\0\u015e\0\u015e\0\u094c"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u0c08\0\u015e\0\u0c4e\0\u015e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u015e\0\u015e\0\u015e\0\u0e38\0\u0e7e"+
    "\0\u01ea\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u01ea\0\u01ea\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u015e"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u1554"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u159a\0\u01ea"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u01ea\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u015e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u015e\0\u1b12\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u015e\0\u1cfc\0\u1d42"+
    "\0\u015e\0\u01ea\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u01ea\0\u1ea0"+
    "\0\u1ee6\0\u01ea\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u01ea\0\u21e8\0\u222e\0\u2274"+
    "\0\u22ba\0\u2300\0\u015e\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u01ea\0\u01ea\0\u24a4\0\u01ea\0\u24ea\0\u2530\0\u01ea\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u015e"+
    "\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u19b4\0\u015e\0\u2904"+
    "\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u01ea\0\u2c06\0\u2c4c\0\u01ea\0\u2c92\0\u01ea"+
    "\0\u01ea\0\u2cd8\0\u01ea\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36"+
    "\0\u2e7c\0\u2ec2\0\u01ea\0\u01ea\0\u2f08\0\u2f4e\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u2f94\0\u01ea\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u01ea\0\u01ea\0\u320a\0\u3250\0\u3296"+
    "\0\u01ea\0\u32dc\0\u3322\0\u01ea\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u01ea\0\u34c6\0\u350c\0\u3552\0\u01ea\0\u3598\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u35de\0\u01ea\0\u01ea\0\u01ea\0\u3624\0\u366a"+
    "\0\u36b0\0\u36f6\0\u01ea\0\u373c\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a"+
    "\0\u38e0\0\u3926\0\u396c\0\u01ea\0\u39b2\0\u01ea\0\u39f8\0\u01ea"+
    "\0\u27ec\0\u3a3e\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u3a84\0\u3aca"+
    "\0\u3b10";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\4\11\1\15\1\16\1\10\1\17\1\20\1\21\2\11"+
    "\1\22\1\23\1\10\1\24\1\10\1\11\1\25\1\26"+
    "\1\6\1\10\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\10\1\63"+
    "\1\10\1\64\1\65\1\10\1\66\1\67\1\70\1\71"+
    "\1\10\62\2\1\72\23\2\2\3\1\0\103\3\45\73"+
    "\1\74\40\73\3\75\1\76\2\75\1\76\1\75\1\76"+
    "\4\75\1\76\1\75\4\76\2\75\5\76\1\75\1\76"+
    "\2\75\2\76\30\75\16\76\107\0\2\7\106\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\2\10\30\0\16\10"+
    "\4\0\1\11\1\77\1\100\1\0\1\101\6\11\3\0"+
    "\1\102\2\11\1\0\1\102\1\0\1\100\1\0\1\11"+
    "\60\0\1\103\107\0\1\104\44\0\1\105\10\0\1\106"+
    "\23\0\2\10\1\0\1\10\1\0\10\10\1\107\5\10"+
    "\1\110\5\10\2\0\1\111\1\10\30\0\1\112\15\10"+
    "\4\0\1\11\1\77\1\100\1\0\1\101\6\11\1\113"+
    "\1\114\1\115\1\102\2\11\1\0\1\102\1\0\1\100"+
    "\1\0\1\11\56\0\2\10\1\0\1\10\1\0\1\116"+
    "\23\10\2\0\2\10\30\0\11\10\1\117\4\10\3\0"+
    "\2\10\1\0\1\10\1\0\10\10\1\120\7\10\1\121"+
    "\2\10\1\122\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\15\10\1\123\6\10\2\0\1\124"+
    "\1\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\12\10\1\125\3\10\1\126\1\10\1\127\3\10\2\0"+
    "\1\10\1\130\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\1\131\23\10\2\0\1\132\1\10\30\0\4\10"+
    "\1\133\11\10\3\0\2\10\1\0\1\10\1\0\7\10"+
    "\1\134\14\10\2\0\1\135\1\10\30\0\2\10\1\136"+
    "\13\10\3\0\2\10\1\0\1\10\1\0\20\10\1\137"+
    "\3\10\1\26\1\0\2\10\30\0\16\10\34\26\1\140"+
    "\1\141\50\26\3\0\2\10\1\0\1\10\1\0\23\10"+
    "\1\142\2\0\2\10\30\0\13\10\1\143\2\10\43\0"+
    "\1\144\116\0\1\145\102\0\1\146\110\0\1\147\10\0"+
    "\1\150\74\0\1\151\1\152\104\0\1\153\1\0\1\154"+
    "\103\0\1\155\2\0\1\156\102\0\1\157\3\0\1\160"+
    "\101\0\1\161\105\0\1\162\105\0\1\163\5\0\1\164"+
    "\1\165\76\0\1\166\34\0\2\10\1\0\1\10\1\0"+
    "\11\10\1\167\3\10\1\170\6\10\2\0\2\10\30\0"+
    "\2\10\1\171\13\10\3\0\2\10\1\0\1\10\1\0"+
    "\10\10\1\172\12\10\1\173\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\10\10\1\174\7\10"+
    "\1\175\3\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\10\10\1\176\1\10\1\177\11\10"+
    "\2\0\2\10\30\0\1\200\15\10\3\0\2\10\1\0"+
    "\1\10\1\0\10\10\1\201\13\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\12\10\1\202"+
    "\10\10\1\203\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\16\10\1\204\5\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\20\10"+
    "\1\205\3\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\16\10\1\206\5\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\2\10\30\0\10\10\1\207\5\10\62\2\1\72"+
    "\1\210\22\2\2\211\1\0\1\212\2\211\1\213\1\211"+
    "\1\213\4\211\1\213\1\211\4\213\2\211\1\214\4\213"+
    "\1\211\1\213\1\211\1\215\2\213\30\211\16\213\3\0"+
    "\2\76\1\0\1\76\1\0\24\76\2\0\2\76\30\0"+
    "\16\76\4\216\1\217\2\0\1\216\1\0\4\217\1\0"+
    "\1\217\4\0\2\217\5\0\1\217\1\0\2\216\2\0"+
    "\30\216\22\0\1\220\2\0\1\221\1\0\4\220\1\0"+
    "\1\220\4\0\2\220\5\0\1\220\22\0\1\221\41\0"+
    "\1\222\1\0\1\223\103\0\1\224\1\0\1\225\7\0"+
    "\1\226\1\227\1\230\65\0\1\231\103\0\2\10\1\0"+
    "\1\10\1\0\23\10\1\232\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\1\233"+
    "\1\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\2\10\30\0\2\10\1\234\13\10\4\0"+
    "\1\113\1\0\1\113\2\0\6\113\3\0\1\102\2\113"+
    "\1\0\1\102\2\0\2\113\64\0\6\114\3\0\1\102"+
    "\1\0\1\114\1\0\1\102\3\0\1\114\70\0\2\115"+
    "\3\0\1\102\1\0\1\115\1\0\1\102\62\0\2\10"+
    "\1\0\1\10\1\0\1\235\23\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\20\10\1\236"+
    "\3\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\7\10\1\237\14\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\24\10\2\0"+
    "\2\10\30\0\1\10\1\240\14\10\3\0\2\10\1\0"+
    "\1\10\1\0\20\10\1\241\3\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\20\10\1\242"+
    "\3\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\15\10\1\243\6\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\24\10\2\0"+
    "\2\10\30\0\7\10\1\244\6\10\3\0\2\10\1\0"+
    "\1\10\1\0\17\10\1\245\4\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\24\10\2\0"+
    "\2\10\30\0\2\10\1\246\13\10\3\0\2\10\1\0"+
    "\1\10\1\0\23\10\1\247\2\0\2\10\30\0\1\250"+
    "\15\10\3\0\2\10\1\0\1\10\1\0\24\10\2\0"+
    "\2\10\30\0\7\10\1\251\6\10\3\0\2\10\1\0"+
    "\1\10\1\0\24\10\2\0\1\10\1\252\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\12\10\1\253\11\10"+
    "\2\0\2\10\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\15\10\1\254\6\10\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\1\255\23\10\2\0"+
    "\1\10\1\256\30\0\16\10\35\26\1\141\50\26\3\0"+
    "\2\10\1\0\1\10\1\0\12\10\1\257\11\10\2\0"+
    "\2\10\30\0\1\260\15\10\3\0\2\10\1\0\1\10"+
    "\1\0\24\10\2\0\2\10\30\0\7\10\1\261\6\10"+
    "\44\262\1\0\41\262\54\0\1\263\34\0\2\10\1\0"+
    "\1\10\1\0\15\10\1\264\6\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\16\10\1\265"+
    "\5\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\24\10\2\0\1\266\1\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\2\10"+
    "\30\0\1\267\15\10\3\0\2\10\1\0\1\10\1\0"+
    "\10\10\1\270\13\10\2\0\2\10\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\24\10\2\0\1\10\1\271"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\2\10\30\0\6\10\1\272\2\10\1\273\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\1\10"+
    "\1\274\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\1\10\1\275\30\0\1\10\1\276\14\10"+
    "\3\0\2\10\1\0\1\10\1\0\11\10\1\277\11\10"+
    "\1\300\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\10\10\1\301\5\10\1\302\5\10\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\23\10\1\303\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\2\10\30\0\2\10"+
    "\1\304\13\10\3\0\2\10\1\0\1\10\1\0\20\10"+
    "\1\305\3\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\16\10\1\306\1\10\1\307\3\10"+
    "\2\0\2\10\30\0\16\10\45\0\1\310\43\0\1\311"+
    "\1\312\1\0\1\312\1\0\24\312\2\0\2\312\5\0"+
    "\1\310\22\0\16\312\3\0\2\312\1\0\1\312\1\0"+
    "\24\312\2\0\2\312\5\0\1\310\22\0\16\312\3\0"+
    "\2\312\1\0\1\312\1\0\24\312\2\0\1\312\1\313"+
    "\5\0\1\310\22\0\16\312\16\0\1\211\1\314\2\0"+
    "\1\315\10\0\5\211\5\0\1\316\44\0\1\217\1\0"+
    "\1\100\1\0\1\101\6\217\4\0\2\217\3\0\1\100"+
    "\1\0\1\217\57\0\1\220\3\0\1\101\6\220\4\0"+
    "\2\220\5\0\1\220\57\0\1\220\4\0\4\220\1\0"+
    "\1\220\4\0\2\220\5\0\1\220\65\0\1\317\107\0"+
    "\1\317\103\0\1\226\107\0\1\226\104\0\1\226\120\0"+
    "\1\320\62\0\2\10\1\0\1\10\1\0\24\10\2\0"+
    "\2\10\30\0\1\321\15\10\3\0\2\10\1\0\1\10"+
    "\1\0\15\10\1\322\6\10\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\15\10\1\323\6\10"+
    "\2\0\2\10\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\23\10\1\324\2\0\2\10\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\10\10\1\325\13\10\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\2\10\30\0\1\326\15\10\3\0\2\10"+
    "\1\0\1\10\1\0\16\10\1\327\5\10\2\0\2\10"+
    "\30\0\1\330\15\10\3\0\2\10\1\0\1\10\1\0"+
    "\20\10\1\331\3\10\2\0\2\10\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\20\10\1\332\3\10\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\1\333\23\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\12\10\1\334\11\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\1\10\1\335\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\24\10\2\0\2\10\30\0\2\10\1\336"+
    "\13\10\3\0\2\10\1\0\1\10\1\0\20\10\1\337"+
    "\3\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\24\10\2\0\2\10\30\0\4\10\1\340"+
    "\11\10\3\0\2\10\1\0\1\10\1\0\20\10\1\341"+
    "\3\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\12\10\1\342\11\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\20\10\1\343"+
    "\3\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\16\10\1\344\5\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\20\10\1\345"+
    "\3\10\2\0\2\10\30\0\16\10\2\262\1\0\103\262"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\1\10"+
    "\1\346\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\2\10\30\0\3\10\1\347\12\10\3\0"+
    "\2\10\1\0\1\10\1\0\15\10\1\350\6\10\2\0"+
    "\1\10\1\351\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\24\10\2\0\1\10\1\352\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\24\10\2\0\2\10\30\0"+
    "\7\10\1\353\6\10\3\0\2\10\1\0\1\10\1\0"+
    "\20\10\1\354\3\10\2\0\2\10\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\24\10\2\0\2\10\30\0"+
    "\1\10\1\355\14\10\3\0\2\10\1\0\1\10\1\0"+
    "\23\10\1\356\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\20\10\1\357\3\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\2\10\30\0\1\10\1\360\14\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\2\10\30\0\11\10"+
    "\1\361\4\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\1\10\1\362\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\1\363\23\10\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\2\10"+
    "\30\0\2\10\1\364\13\10\3\0\2\10\1\0\1\10"+
    "\1\0\24\10\2\0\2\10\30\0\2\10\1\365\13\10"+
    "\3\0\2\10\1\0\1\10\1\0\23\10\1\366\2\0"+
    "\2\10\30\0\16\10\3\0\1\367\1\312\1\0\1\312"+
    "\1\0\24\312\2\0\2\312\5\0\1\310\22\0\16\312"+
    "\3\0\2\312\1\0\1\312\1\0\24\312\2\0\2\312"+
    "\30\0\16\312\3\0\2\312\1\0\1\312\1\0\24\312"+
    "\2\0\2\312\30\0\1\370\15\312\4\0\1\371\1\0"+
    "\1\371\1\0\5\371\1\0\1\371\2\0\1\371\1\0"+
    "\2\371\3\0\3\371\35\0\2\371\4\0\1\371\47\0"+
    "\1\372\74\0\1\373\61\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\2\10\30\0\2\10\1\374\13\10\3\0"+
    "\2\10\1\0\1\10\1\0\20\10\1\375\3\10\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\20\10\1\376\3\10\2\0\2\10\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\23\10\1\377\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\2\10\30\0\4\10\1\u0100\11\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\2\10\30\0\5\10"+
    "\1\u0101\10\10\3\0\2\10\1\0\1\10\1\0\17\10"+
    "\1\u0102\4\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\1\u0103\23\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\23\10\1\u0104"+
    "\2\0\2\10\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\10\10\1\u0105\13\10\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\2\10"+
    "\30\0\1\10\1\u0106\14\10\3\0\2\10\1\0\1\10"+
    "\1\0\16\10\1\u0107\5\10\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\23\10\1\u0108\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\23\10\1\u0109\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\1\10\1\u010a\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\10\10\1\u010b"+
    "\13\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\23\10\1\u010c\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\1\u010d"+
    "\1\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\1\10\1\u010e\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\16\10\1\u010f\5\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\20\10"+
    "\1\u0110\3\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\2\10\30\0\10\10"+
    "\1\u0111\5\10\3\0\2\10\1\0\1\10\1\0\10\10"+
    "\1\u0112\13\10\2\0\2\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\12\10\1\u0113\11\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\24\10"+
    "\2\0\2\10\30\0\6\10\1\u0114\7\10\3\0\2\10"+
    "\1\0\1\10\1\0\20\10\1\u0115\3\10\2\0\2\10"+
    "\30\0\16\10\3\0\2\10\1\0\1\10\1\0\20\10"+
    "\1\u0116\3\10\2\0\2\10\30\0\16\10\3\0\1\213"+
    "\1\312\1\0\1\312\1\0\24\312\2\0\2\312\5\0"+
    "\1\310\22\0\16\312\3\0\2\312\1\0\1\312\1\0"+
    "\24\312\2\0\1\312\1\u0117\30\0\16\312\4\0\1\211"+
    "\1\0\1\211\1\0\5\211\1\0\1\211\2\0\1\211"+
    "\1\0\2\211\3\0\3\211\35\0\2\211\4\0\1\211"+
    "\13\0\1\u0118\1\0\1\u0118\1\0\5\u0118\1\0\1\u0118"+
    "\2\0\1\u0118\1\0\2\u0118\3\0\3\u0118\6\0\1\211"+
    "\26\0\2\u0118\4\0\1\u0118\37\0\1\226\60\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\1\10\1\u0119\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\16\10\1\u011a"+
    "\5\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\20\10\1\u011b\3\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\20\10\1\u011c"+
    "\3\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\20\10\1\u011d\3\10\2\0\2\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\1\u011e\23\10"+
    "\2\0\2\10\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\24\10\2\0\1\10\1\u011f\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\24\10\2\0\2\10\30\0"+
    "\1\10\1\u0120\14\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\1\u0121\1\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\1\u0122\1\10\30\0"+
    "\16\10\3\0\2\10\1\0\1\10\1\0\1\u0123\23\10"+
    "\2\0\2\10\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\24\10\2\0\2\10\30\0\1\u0124\15\10\3\0"+
    "\2\10\1\0\1\10\1\0\10\10\1\u0125\13\10\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\1\u0126\1\10\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\24\10\2\0\2\10\30\0\1\u0127"+
    "\15\10\3\0\2\312\1\0\1\312\1\0\16\312\1\u0128"+
    "\5\312\2\0\2\312\30\0\16\312\4\0\1\u0129\1\0"+
    "\1\u0129\1\0\5\u0129\1\0\1\u0129\2\0\1\u0129\1\0"+
    "\2\u0129\3\0\3\u0129\6\0\1\211\26\0\2\u0129\4\0"+
    "\1\u0129\12\0\2\10\1\0\1\10\1\0\10\10\1\u012a"+
    "\13\10\2\0\2\10\30\0\16\10\3\0\2\10\1\0"+
    "\1\10\1\0\24\10\2\0\2\10\30\0\6\10\1\u012b"+
    "\7\10\3\0\2\10\1\0\1\10\1\0\24\10\2\0"+
    "\2\10\30\0\6\10\1\u012c\7\10\3\0\2\10\1\0"+
    "\1\10\1\0\24\10\2\0\2\10\30\0\1\10\1\u012d"+
    "\14\10\3\0\2\10\1\0\1\10\1\0\1\u012e\23\10"+
    "\2\0\2\10\30\0\16\10\3\0\2\10\1\0\1\10"+
    "\1\0\12\10\1\u012f\11\10\2\0\2\10\30\0\16\10"+
    "\3\0\2\10\1\0\1\10\1\0\24\10\2\0\2\10"+
    "\30\0\2\10\1\u0130\13\10\3\0\2\312\1\0\1\312"+
    "\1\0\24\312\2\0\2\312\30\0\1\312\1\u0131\14\312"+
    "\4\0\1\u0132\1\0\1\u0132\1\0\5\u0132\1\0\1\u0132"+
    "\2\0\1\u0132\1\0\2\u0132\3\0\3\u0132\6\0\1\211"+
    "\26\0\2\u0132\4\0\1\u0132\12\0\2\10\1\0\1\10"+
    "\1\0\1\u0133\23\10\2\0\2\10\30\0\16\10\3\0"+
    "\2\10\1\0\1\10\1\0\20\10\1\u0134\3\10\2\0"+
    "\2\10\30\0\16\10\3\0\2\10\1\0\1\10\1\0"+
    "\24\10\2\0\1\10\1\u0135\30\0\16\10\3\0\2\10"+
    "\1\0\1\10\1\0\20\10\1\u0136\3\10\2\0\2\10"+
    "\30\0\16\10\4\0\1\u0137\1\0\1\u0137\1\0\5\u0137"+
    "\1\0\1\u0137\2\0\1\u0137\1\0\2\u0137\3\0\3\u0137"+
    "\6\0\1\211\26\0\2\u0137\4\0\1\u0137\13\0\1\u0138"+
    "\1\0\1\u0138\1\0\5\u0138\1\0\1\u0138\2\0\1\u0138"+
    "\1\0\2\u0138\3\0\3\u0138\6\0\1\211\26\0\2\u0138"+
    "\4\0\1\u0138\13\0\1\u0139\1\0\1\u0139\1\0\5\u0139"+
    "\1\0\1\u0139\2\0\1\u0139\1\0\2\u0139\3\0\3\u0139"+
    "\6\0\1\211\26\0\2\u0139\4\0\1\u0139\50\0\1\211"+
    "\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\1\11\21\1\2\11\2\1\5\11"+
    "\1\1\2\11\11\1\3\11\12\1\1\0\1\11\1\1"+
    "\1\11\1\1\4\0\1\1\3\11\31\1\1\11\4\1"+
    "\13\11\1\1\6\11\21\1\1\11\1\0\3\1\1\0"+
    "\1\11\2\1\5\0\1\11\2\0\1\11\31\1\1\11"+
    "\24\1\1\11\3\1\2\0\1\1\1\11\1\0\50\1"+
    "\3\0\34\1\1\0\20\1\1\0\10\1\1\0\4\1"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _RustLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 107: 
          { return RustTokenElementTypes.SIZEOF;
          }
        case 121: break;
        case 1: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '*')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.BLOCK_COMMENT;
          }
        case 122: break;
        case 98: 
          { return RustTokenElementTypes.CONST;
          }
        case 123: break;
        case 49: 
          { return RustTokenElementTypes.FAT_ARROW;
          }
        case 124: break;
        case 88: 
          { return RustTokenElementTypes.MOVE;
          }
        case 125: break;
        case 117: 
          { return RustTokenElementTypes.OFFSETOF;
          }
        case 126: break;
        case 36: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 127: break;
        case 20: 
          { return RustTokenElementTypes.COLON;
          }
        case 128: break;
        case 76: 
          { return RustTokenElementTypes.LET;
          }
        case 129: break;
        case 106: 
          { return RustTokenElementTypes.UNSAFE;
          }
        case 130: break;
        case 6: 
          { return RustTokenElementTypes.INTEGER_LITERAL;
          }
        case 131: break;
        case 95: 
          { return RustTokenElementTypes.BREAK;
          }
        case 132: break;
        case 32: 
          { return RustTokenElementTypes.GT;
          }
        case 133: break;
        case 42: 
          { return RustTokenElementTypes.FN;
          }
        case 134: break;
        case 97: 
          { return RustTokenElementTypes.TRAIT;
          }
        case 135: break;
        case 90: 
          { return RustTokenElementTypes.PROC;
          }
        case 136: break;
        case 26: 
          { return RustTokenElementTypes.AND;
          }
        case 137: break;
        case 12: 
          { return RustTokenElementTypes.RBRACE;
          }
        case 138: break;
        case 11: 
          { return RustTokenElementTypes.LBRACE;
          }
        case 139: break;
        case 17: 
          { return RustTokenElementTypes.RBRACK;
          }
        case 140: break;
        case 15: 
          { return RustTokenElementTypes.LBRACK;
          }
        case 141: break;
        case 24: 
          { return RustTokenElementTypes.PLUS;
          }
        case 142: break;
        case 25: 
          { return RustTokenElementTypes.OR;
          }
        case 143: break;
        case 63: 
          { return RustTokenElementTypes.REMEQ;
          }
        case 144: break;
        case 86: 
          { return RustTokenElementTypes.TYPE;
          }
        case 145: break;
        case 102: 
          { return RustTokenElementTypes.YIELD;
          }
        case 146: break;
        case 48: 
          { return RustTokenElementTypes.EQEQ;
          }
        case 147: break;
        case 66: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.LIFETIME;
          }
        case 148: break;
        case 91: 
          { return RustTokenElementTypes.PRIV;
          }
        case 149: break;
        case 35: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 150: break;
        case 96: 
          { return RustTokenElementTypes.SUPER;
          }
        case 151: break;
        case 39: 
          { return RustTokenElementTypes.MINUSMINUS;
          }
        case 152: break;
        case 105: 
          { return RustTokenElementTypes.BECOME;
          }
        case 153: break;
        case 57: 
          { return RustTokenElementTypes.LTLT;
          }
        case 154: break;
        case 13: 
          { return RustTokenElementTypes.SHA;
          }
        case 155: break;
        case 14: 
          { return RustTokenElementTypes.EXCL;
          }
        case 156: break;
        case 83: 
          { return RustTokenElementTypes.ENUM;
          }
        case 157: break;
        case 118: 
          { return RustTokenElementTypes.OVERRIDE;
          }
        case 158: break;
        case 22: 
          { return RustTokenElementTypes.COMMA;
          }
        case 159: break;
        case 112: 
          { return RustTokenElementTypes.TYPEOF;
          }
        case 160: break;
        case 34: 
          { return RustTokenElementTypes.AT;
          }
        case 161: break;
        case 116: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.STATIC_LIFETIME;
          }
        case 162: break;
        case 4: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 163: break;
        case 43: 
          { return RustTokenElementTypes.IF;
          }
        case 164: break;
        case 72: 
          { return RustTokenElementTypes.USE;
          }
        case 165: break;
        case 19: 
          { return RustTokenElementTypes.RPAREN;
          }
        case 166: break;
        case 69: 
          { return RustTokenElementTypes.DOTDOTDOT;
          }
        case 167: break;
        case 52: 
          { return RustTokenElementTypes.OREQ;
          }
        case 168: break;
        case 16: 
          { yybegin(LIFETIME_OR_CHAR); yypushback(1);
          }
        case 169: break;
        case 59: 
          { return RustTokenElementTypes.MULEQ;
          }
        case 170: break;
        case 58: 
          { return RustTokenElementTypes.XOREQ;
          }
        case 171: break;
        case 31: 
          { return RustTokenElementTypes.REM;
          }
        case 172: break;
        case 77: 
          { return RustTokenElementTypes.MOD;
          }
        case 173: break;
        case 120: 
          { return RustTokenElementTypes.CONTINUE;
          }
        case 174: break;
        case 28: 
          { return RustTokenElementTypes.XOR;
          }
        case 175: break;
        case 2: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '/')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.EOL_COMMENT;
          }
        case 176: break;
        case 30: 
          { return RustTokenElementTypes.DIV;
          }
        case 177: break;
        case 64: 
          { return RustTokenElementTypes.AS;
          }
        case 178: break;
        case 38: 
          { return RustTokenElementTypes.DOTDOT;
          }
        case 179: break;
        case 18: 
          { return RustTokenElementTypes.LPAREN;
          }
        case 180: break;
        case 60: 
          { return RustTokenElementTypes.DIVEQ;
          }
        case 181: break;
        case 40: 
          { return RustTokenElementTypes.MINUSEQ;
          }
        case 182: break;
        case 55: 
          { return RustTokenElementTypes.ANDAND;
          }
        case 183: break;
        case 93: 
          { return RustTokenElementTypes.FINAL;
          }
        case 184: break;
        case 73: 
          { return RustTokenElementTypes.REF;
          }
        case 185: break;
        case 9: 
          { return RustTokenElementTypes.UNDERSCORE;
          }
        case 186: break;
        case 115: 
          { return RustTokenElementTypes.VIRTUAL;
          }
        case 187: break;
        case 94: 
          { return RustTokenElementTypes.FALSE;
          }
        case 188: break;
        case 109: 
          { return RustTokenElementTypes.STATIC;
          }
        case 189: break;
        case 99: 
          { return RustTokenElementTypes.CRATE;
          }
        case 190: break;
        case 92: 
          { return RustTokenElementTypes.CSELF;
          }
        case 191: break;
        case 61: 
          { yybegin(BLOCK_COMMENT); yypushback(2);
          }
        case 192: break;
        case 45: 
          { return RustTokenElementTypes.SHEBANG;
          }
        case 193: break;
        case 7: 
          { return RustTokenElementTypes.DOT;
          }
        case 194: break;
        case 75: 
          { return RustTokenElementTypes.LTLTEQ;
          }
        case 195: break;
        case 54: 
          { return RustTokenElementTypes.ANDEQ;
          }
        case 196: break;
        case 84: 
          { return RustTokenElementTypes.ELSE;
          }
        case 197: break;
        case 114: 
          { return RustTokenElementTypes.ALIGNOF;
          }
        case 198: break;
        case 21: 
          { return RustTokenElementTypes.SEMICOLON;
          }
        case 199: break;
        case 79: 
          { return RustTokenElementTypes.PUB;
          }
        case 200: break;
        case 78: 
          { return RustTokenElementTypes.MUT;
          }
        case 201: break;
        case 119: 
          { return RustTokenElementTypes.ABSTRACT;
          }
        case 202: break;
        case 74: 
          { return RustTokenElementTypes.SHEBANG_LINE;
          }
        case 203: break;
        case 110: 
          { return RustTokenElementTypes.EXTERN;
          }
        case 204: break;
        case 23: 
          { return RustTokenElementTypes.EQ;
          }
        case 205: break;
        case 87: 
          { return RustTokenElementTypes.LOOP;
          }
        case 206: break;
        case 10: 
          { return RustTokenElementTypes.STRING_LITERAL;
          }
        case 207: break;
        case 104: 
          { return RustTokenElementTypes.WHERE;
          }
        case 208: break;
        case 113: 
          { return RustTokenElementTypes.UNSIZED;
          }
        case 209: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 210: break;
        case 89: 
          { return RustTokenElementTypes.PURE;
          }
        case 211: break;
        case 80: 
          { yybegin(SUFFIX); return RustTokenElementTypes.CHAR_LITERAL;
          }
        case 212: break;
        case 108: 
          { return RustTokenElementTypes.STRUCT;
          }
        case 213: break;
        case 111: 
          { return RustTokenElementTypes.RETURN;
          }
        case 214: break;
        case 101: 
          { return RustTokenElementTypes.MACRO;
          }
        case 215: break;
        case 67: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 216: break;
        case 68: 
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 217: break;
        case 82: 
          { return RustTokenElementTypes.IMPL;
          }
        case 218: break;
        case 81: 
          { return RustTokenElementTypes.SELF;
          }
        case 219: break;
        case 47: 
          { return RustTokenElementTypes.COLONCOLON;
          }
        case 220: break;
        case 5: 
          { return RustTokenElementTypes.IDENTIFIER;
          }
        case 221: break;
        case 8: 
          { return RustTokenElementTypes.MINUS;
          }
        case 222: break;
        case 50: 
          { return RustTokenElementTypes.PLUSEQ;
          }
        case 223: break;
        case 85: 
          { return RustTokenElementTypes.TRUE;
          }
        case 224: break;
        case 100: 
          { return RustTokenElementTypes.MATCH;
          }
        case 225: break;
        case 71: 
          { return RustTokenElementTypes.BOX;
          }
        case 226: break;
        case 53: 
          { return RustTokenElementTypes.OROR;
          }
        case 227: break;
        case 3: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 228: break;
        case 41: 
          { return RustTokenElementTypes.ARROW;
          }
        case 229: break;
        case 29: 
          { return RustTokenElementTypes.MUL;
          }
        case 230: break;
        case 33: 
          { return RustTokenElementTypes.Q;
          }
        case 231: break;
        case 70: 
          { return RustTokenElementTypes.FOR;
          }
        case 232: break;
        case 27: 
          { return RustTokenElementTypes.LT;
          }
        case 233: break;
        case 46: 
          { return RustTokenElementTypes.EXCLEQ;
          }
        case 234: break;
        case 56: 
          { return RustTokenElementTypes.LTEQ;
          }
        case 235: break;
        case 51: 
          { return RustTokenElementTypes.PLUSPLUS;
          }
        case 236: break;
        case 62: 
          { yybegin(EOL_COMMENT);   yypushback(2);
          }
        case 237: break;
        case 65: 
          { return RustTokenElementTypes.DO;
          }
        case 238: break;
        case 44: 
          { return RustTokenElementTypes.IN;
          }
        case 239: break;
        case 103: 
          { return RustTokenElementTypes.WHILE;
          }
        case 240: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case LIFETIME_OR_CHAR: {
              yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
            case 314: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
